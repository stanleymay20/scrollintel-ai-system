# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to ignore the entire .idea directory.
.idea/

# Node.js dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
.next/
out/

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Storybook build outputs
.out
.storybook-out
storybook-static

# Temporary folders
tmp/
temp/

# Editor directories and files
.vscode/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Database files
*.db
*.sqlite
*.sqlite3
episodic_memory.db
long_term_memory.db
legal_compliance.db
scrollintel.db

# Log files
*.log
logs/
launch_preparation.log
simple_bulletproof_tests.log

# Generated content and reports
generated_content/
generated_dashboards/
generated_reports/
launch_reports/
launch_metrics/
reports/
test_results/
marketing_materials/
backups/

# Large test files
test_file_*.txt

# Temporary test files
test_file_*.txt
*.png
*.jpg
*.jpeg
*.gif
*.mp4
*.avi
*.mov

# Alembic migration files (keep the directory structure but ignore auto-generated files)
alembic/versions/*.py
!alembic/versions/__init__.py

# Docker
.dockerignore

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Monitoring and metrics
monitoring_test_report.json
*_test_report.json
*_demo_results_*.json
ultra_performance_report_*.json

# AI/ML model files
models/
*.pkl
*.joblib
*.h5
*.pb

# Jupyter notebooks checkpoints
.ipynb_checkpoints/

# IDEs
*.sublime-project
*.sublime-workspace

# Local configuration files
config.local.py
settings.local.py

# SSL certificates
*.pem
*.key
*.crt

# Backup files
*.bak
*.backup
*.old

# Temporary Python files
*.pyc
*.pyo
*.pyd

# Virtual environments
.Python
pyvenv.cfg

# Local development
.local/
local/

# Documentation builds
docs/build/
docs/_build/

# Package files
*.tar.gz
*.zip
*.rar

# IDE specific files
.vscode/settings.json
.vscode/launch.json
.vscode/extensions.json
.vscode/tasks.json

# Ignore specific generated files from your project
ai_readiness_*.html
ai_readiness_*.json
comparison_dashboard.html
dashboard_*.html
forecast_*.png
eda_*.png
quality_report_*.html
quality_report_*.json
sample_ai_readiness_report.*
monitoring_dashboard.html

# Ignore specific demo and test output files
*_demo_datasets.png
autonomous_innovation_lab_demo_results_*.json
autonomous_lab_testing_demo_results_*.json
crisis_effectiveness_test_effectiveness_test_*.json
analytics_marketing_report_*.json
board_testing_report_*.txt

# Keep important config files but ignore sensitive ones
!.env.example
!.env.core.example
!docker-compose*.yml
!Dockerfile*
!requirements*.txt
!package*.json
!alembic.ini
!pytest.ini
!kiro.yaml

# Ignore user-specific Kiro settings but keep the structure
.kiro/settings/
!.kiro/settings/.gitkeep

# Keep spec files - these are important for the project
!.kiro/specs/