#!/usr/bin/env python3
"""
ScrollIntel Cloud Deployment Script
Deploy to Render, Railway, or Vercel instantly
"""

import os
import sys
import subprocess
import json
import time

def run_command(command, shell=True):
    """Run command and return result"""
    try:
        print(f"🔧 Running: {command}")
        result = subprocess.run(
            command,
            shell=shell,
            check=True,
            capture_output=True,
            text=True
        )
        print(f"✅ Success: {command}")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed: {command}")
        print(f"Error: {e.stderr}")
        return None

def create_render_deployment():
    """Create Render deployment files"""
    
    # Create render.yaml for backend only
    render_config = """services:
  - type: web
    name: scrollintel-backend
    env: python
    plan: starter
    buildCommand: pip install -r requirements.txt
    startCommand: uvicorn scrollintel.api.simple_main:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: ENVIRONMENT
        value: production
      - key: DEBUG
        value: false
      - key: JWT_SECRET_KEY
        generateValue: true
      - key: OPENAI_API_KEY
        value: your-openai-api-key-here
"""
    
    with open("render.yaml", "w") as f:
        f.write(render_config)
    
    print("✅ Render configuration created")

def create_railway_deployment():
    """Create Railway deployment files"""
    
    # Create railway.json
    railway_config = {
        "build": {
            "builder": "NIXPACKS"
        },
        "deploy": {
            "startCommand": "uvicorn scrollintel.api.simple_main:app --host 0.0.0.0 --port $PORT",
            "healthcheckPath": "/health"
        }
    }
    
    with open("railway.json", "w") as f:
        json.dump(railway_config, f, indent=2)
    
    # Create Procfile
    with open("Procfile", "w") as f:
        f.write("web: uvicorn scrollintel.api.simple_main:app --host 0.0.0.0 --port $PORT\n")
    
    print("✅ Railway configuration created")

def create_vercel_deployment():
    """Create Vercel deployment files"""
    
    # Create vercel.json
    vercel_config = {
        "version": 2,
        "builds": [
            {
                "src": "scrollintel/api/simple_main.py",
                "use": "@vercel/python"
            }
        ],
        "routes": [
            {
                "src": "/(.*)",
                "dest": "scrollintel/api/simple_main.py"
            }
        ],
        "env": {
            "ENVIRONMENT": "production",
            "DEBUG": "false",
            "OPENAI_API_KEY": "your-openai-api-key-here"
        }
    }
    
    with open("vercel.json", "w") as f:
        json.dump(vercel_config, f, indent=2)
    
    print("✅ Vercel configuration created")

def deploy_to_render():
    """Deploy to Render"""
    print("🚀 Deploying to Render...")
    
    create_render_deployment()
    
    # Commit and push
    run_command("git add render.yaml")
    run_command('git commit -m "Add Render deployment config"')
    run_command("git push origin main")
    
    print("\n🎉 RENDER DEPLOYMENT READY!")
    print("=" * 50)
    print("1. Go to https://render.com")
    print("2. Sign up/Login with GitHub")
    print("3. Click 'New Web Service'")
    print("4. Connect your GitHub repo: stanleymay20/ScrollIntel")
    print("5. Render will auto-detect the render.yaml config")
    print("6. Click 'Deploy'")
    print("\n⏱️ Your app will be live in 3-5 minutes!")
    print("🔗 URL will be: https://scrollintel-backend.onrender.com")
    
    return True

def deploy_to_railway():
    """Deploy to Railway"""
    print("🚀 Deploying to Railway...")
    
    create_railway_deployment()
    
    # Commit and push
    run_command("git add railway.json Procfile")
    run_command('git commit -m "Add Railway deployment config"')
    run_command("git push origin main")
    
    print("\n🎉 RAILWAY DEPLOYMENT READY!")
    print("=" * 50)
    print("1. Go to https://railway.app")
    print("2. Sign up/Login with GitHub")
    print("3. Click 'Deploy from GitHub repo'")
    print("4. Select: stanleymay20/ScrollIntel")
    print("5. Railway will auto-deploy using railway.json")
    print("\n⏱️ Your app will be live in 2-3 minutes!")
    print("🔗 URL will be auto-generated by Railway")
    
    return True

def deploy_to_vercel():
    """Deploy to Vercel"""
    print("🚀 Deploying to Vercel...")
    
    create_vercel_deployment()
    
    # Commit and push
    run_command("git add vercel.json")
    run_command('git commit -m "Add Vercel deployment config"')
    run_command("git push origin main")
    
    print("\n🎉 VERCEL DEPLOYMENT READY!")
    print("=" * 50)
    print("1. Go to https://vercel.com")
    print("2. Sign up/Login with GitHub")
    print("3. Click 'Import Project'")
    print("4. Select: stanleymay20/ScrollIntel")
    print("5. Vercel will auto-deploy using vercel.json")
    print("\n⏱️ Your app will be live in 1-2 minutes!")
    print("🔗 URL will be: https://scrollintel.vercel.app")
    
    return True

def main():
    """Main deployment function"""
    print("🌟 ScrollIntel Cloud Deployment")
    print("=" * 50)
    print("Choose your deployment platform:")
    print("1. 🔥 Render (Recommended - Full Backend)")
    print("2. 🚄 Railway (Fast - Auto-scaling)")
    print("3. ⚡ Vercel (Fastest - Serverless)")
    print("4. 🎯 All Platforms (Maximum Coverage)")
    
    choice = input("\nEnter your choice (1-4): ").strip()
    
    if choice == "1":
        return deploy_to_render()
    elif choice == "2":
        return deploy_to_railway()
    elif choice == "3":
        return deploy_to_vercel()
    elif choice == "4":
        print("🚀 Deploying to ALL platforms...")
        deploy_to_render()
        deploy_to_railway()
        deploy_to_vercel()
        print("\n🎉 ALL PLATFORMS CONFIGURED!")
        print("Your ScrollIntel will be available on:")
        print("🔥 Render: https://scrollintel-backend.onrender.com")
        print("🚄 Railway: (URL provided after deployment)")
        print("⚡ Vercel: https://scrollintel.vercel.app")
        return True
    else:
        print("❌ Invalid choice. Please run again.")
        return False

if __name__ == "__main__":
    main()