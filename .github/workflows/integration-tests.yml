name: ScrollIntel Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scrollintel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Wait for services
      run: |
        sleep 10
        # Test database connection
        python -c "import psycopg2; psycopg2.connect('postgresql://postgres:postgres@localhost:5432/scrollintel_test')"
        # Test Redis connection
        python -c "import redis; redis.Redis(host='localhost', port=6379).ping()"
    
    - name: Set up test environment
      run: |
        mkdir -p test_reports
        mkdir -p htmlcov
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/scrollintel_test
        export REDIS_URL=redis://localhost:6379/0
        export TESTING=true
    
    - name: Run agent interaction tests
      run: |
        python -m pytest tests/integration/test_agent_interactions.py -v \
          --tb=short --cov=scrollintel --cov-append \
          --json-report --json-report-file=test_reports/agent_interactions.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run end-to-end workflow tests
      run: |
        python -m pytest tests/integration/test_end_to_end_workflows.py -v \
          --tb=short --cov=scrollintel --cov-append \
          --json-report --json-report-file=test_reports/e2e_workflows.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run data pipeline tests
      run: |
        python -m pytest tests/integration/test_data_pipelines.py -v \
          --tb=short --cov=scrollintel --cov-append \
          --json-report --json-report-file=test_reports/data_pipelines.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run security penetration tests
      run: |
        python -m pytest tests/integration/test_security_penetration.py -v \
          --tb=short --cov=scrollintel --cov-append \
          --json-report --json-report-file=test_reports/security_tests.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run performance tests
      run: |
        python -m pytest tests/integration/test_performance.py -v \
          --tb=short --timeout=900 --cov=scrollintel --cov-append \
          --json-report --json-report-file=test_reports/performance_tests.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run smoke tests
      run: |
        python -m pytest tests/integration/test_smoke_tests.py -v \
          --tb=short --cov=scrollintel --cov-append \
          --json-report --json-report-file=test_reports/smoke_tests.json
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Generate comprehensive test report
      run: |
        python tests/integration/test_runner.py --output-dir test_reports
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scrollintel_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests-${{ matrix.python-version }}
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          test_reports/
          htmlcov/
        retention-days: 30
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Integration Tests (${{ matrix.python-version }})
        path: test_reports/*.json
        reporter: jest-junit
        fail-on-error: true

  docker-integration-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image
      run: |
        docker build -t scrollintel:test .
    
    - name: Run integration tests in Docker
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from scrollintel-test
    
    - name: Run performance tests in Docker
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from performance-test
    
    - name: Run security tests in Docker
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from security-test
    
    - name: Cleanup Docker containers
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  test-summary:
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-integration-tests]
    if: always()
    
    steps:
    - name: Download test reports
      uses: actions/download-artifact@v3
      with:
        path: all-test-reports
    
    - name: Generate summary report
      run: |
        echo "# ScrollIntel Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results by Python Version" >> $GITHUB_STEP_SUMMARY
        
        for version in 3.9 3.10 3.11; do
          echo "### Python $version" >> $GITHUB_STEP_SUMMARY
          if [ -d "all-test-reports/test-reports-$version" ]; then
            echo "✅ Tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Docker Integration Tests" >> $GITHUB_STEP_SUMMARY
        echo "✅ Docker integration tests completed" >> $GITHUB_STEP_SUMMARY
    
    - name: Check test results
      run: |
        # This step would analyze test results and fail if thresholds aren't met
        echo "Analyzing test results..."
        
        # Check if any critical tests failed
        if [ "${{ needs.integration-tests.result }}" != "success" ]; then
          echo "Integration tests failed"
          exit 1
        fi
        
        if [ "${{ needs.docker-integration-tests.result }}" != "success" ]; then
          echo "Docker integration tests failed"
          exit 1
        fi
        
        echo "All integration tests passed successfully!"