output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = module.eks.cluster_security_group_id
}

output "cluster_iam_role_name" {
  description = "IAM role name associated with EKS cluster"
  value       = module.eks.cluster_iam_role_name
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = module.eks.cluster_certificate_authority_data
}

output "cluster_name" {
  description = "The name/id of the EKS cluster"
  value       = module.eks.cluster_name
}

output "cluster_oidc_issuer_url" {
  description = "The URL on the EKS cluster for the OpenID Connect identity provider"
  value       = module.eks.cluster_oidc_issuer_url
}

output "node_groups" {
  description = "EKS node groups"
  value       = module.eks.eks_managed_node_groups
}

output "vpc_id" {
  description = "ID of the VPC where the cluster is deployed"
  value       = module.vpc.vpc_id
}

output "vpc_cidr_block" {
  description = "The CIDR block of the VPC"
  value       = module.vpc.vpc_cidr_block
}

output "private_subnets" {
  description = "List of IDs of private subnets"
  value       = module.vpc.private_subnets
}

output "public_subnets" {
  description = "List of IDs of public subnets"
  value       = module.vpc.public_subnets
}

output "database_endpoint" {
  description = "RDS instance endpoint"
  value       = module.db.db_instance_endpoint
  sensitive   = true
}

output "database_port" {
  description = "RDS instance port"
  value       = module.db.db_instance_port
}

output "database_name" {
  description = "RDS instance name"
  value       = module.db.db_instance_name
}

output "redis_endpoint" {
  description = "Redis cluster endpoint"
  value       = aws_elasticache_replication_group.redis.primary_endpoint_address
  sensitive   = true
}

output "redis_port" {
  description = "Redis cluster port"
  value       = aws_elasticache_replication_group.redis.port
}

output "s3_bucket_name" {
  description = "Name of the S3 bucket for artifacts"
  value       = aws_s3_bucket.artifacts.bucket
}

output "s3_bucket_arn" {
  description = "ARN of the S3 bucket for artifacts"
  value       = aws_s3_bucket.artifacts.arn
}

output "load_balancer_dns" {
  description = "DNS name of the load balancer"
  value       = aws_lb.main.dns_name
}

output "load_balancer_zone_id" {
  description = "Zone ID of the load balancer"
  value       = aws_lb.main.zone_id
}

output "cloudwatch_log_groups" {
  description = "CloudWatch log groups"
  value = {
    orchestration = aws_cloudwatch_log_group.orchestration.name
    intelligence  = aws_cloudwatch_log_group.intelligence.name
  }
}

# Kubernetes configuration for kubectl
output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/templates/kubeconfig.tpl", {
    cluster_name     = module.eks.cluster_name
    endpoint         = module.eks.cluster_endpoint
    ca_data          = module.eks.cluster_certificate_authority_data
    aws_region       = var.aws_region
  })
  sensitive = true
}

# Connection strings and URLs
output "connection_strings" {
  description = "Connection strings for services"
  value = {
    database = "postgresql://${module.db.db_instance_username}:${random_password.db_password.result}@${module.db.db_instance_endpoint}/${module.db.db_instance_name}"
    redis    = "redis://${aws_elasticache_replication_group.redis.primary_endpoint_address}:${aws_elasticache_replication_group.redis.port}"
  }
  sensitive = true
}

# Service URLs
output "service_urls" {
  description = "Service URLs"
  value = {
    api_base_url        = "https://${var.domain_config.subdomain_api}.${var.domain_config.domain_name}"
    monitoring_url      = "https://${var.domain_config.subdomain_monitoring}.${var.domain_config.domain_name}"
    load_balancer_url   = "http://${aws_lb.main.dns_name}"
  }
}

# Security group IDs
output "security_groups" {
  description = "Security group IDs"
  value = {
    cluster    = module.eks.cluster_security_group_id
    nodes      = aws_security_group.node_group_one.id
    database   = aws_security_group.rds.id
    redis      = aws_security_group.redis.id
    alb        = aws_security_group.alb.id
  }
}

# IAM roles and policies
output "iam_roles" {
  description = "IAM roles"
  value = {
    cluster_role = module.eks.cluster_iam_role_name
    node_groups  = module.eks.eks_managed_node_groups
  }
}

# Monitoring and observability
output "monitoring_endpoints" {
  description = "Monitoring and observability endpoints"
  value = {
    prometheus_url = "http://prometheus-service.agent-steering-system.svc.cluster.local:9090"
    grafana_url    = "http://grafana-service.agent-steering-system.svc.cluster.local:3000"
  }
}

# Resource tags
output "common_tags" {
  description = "Common tags applied to all resources"
  value = merge(
    {
      Project     = "agent-steering-system"
      Environment = var.environment
      ManagedBy   = "terraform"
    },
    var.tags
  )
}